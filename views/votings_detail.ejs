<!DOCTYPE html>
<html>
  <head>
    <% include ./partials/head %>
  </head>
  <body>
    <% include ./partials/header %>
    <% include ./partials/nav %>
    <div>
      <a href="/">목록으로</a>
      <% if (isSameUser) { %>
        <button type="button" class="btn-del-vote">삭제</button>
      <% } %>
      <h3>
        <%= vote.title %>
        <% var isExpired = (new Date() - new Date(vote.expired_at) > 0); %>
        <span class="<%= isExpired ? 'inactive' : 'active' %>">
          ON
        </span>
      </h3>
      <ul>
        <li><%= vote.user_id.name %></li>
        <li><%= vote.converted_date %></li>
      </ul>
    </div>
    <form class="voting-form">
      <ul>
        <% for (var i = 0; i < vote.options.length; i++) { %>
          <li>
            <label data-vote-id="<%= vote._id %>">
              <span><%= vote.options[i].title %></span>
              <input type="radio" name="option" data-option-id="<%= vote.options[i]._id %>" />
            </label>
          </li>
        <% } %>
      </ul>
      <button type="submit">투표하기</button>
    </form>
    <% if (isSameUser || isExpired) { %>
      <div class="result-box">
        <ul>
          <% for (var i = 0; i < vote.options.length; i++) { %>
            <li>
              <div><%= vote.options[i].title %></div>
              <div><%= vote.options[i].voted_user.length %></div>
            </li>
          <% } %>
        </ul>
      </div>
    <% } %>

    <script>
      function sendVoteApi (voteId, optionId) {
        return fetch('/votings/vote', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ voteId, optionId })
        })
        .then(function (res) {
          return res.json();
        });
      }

      function delVoteApi (voteId) {
        return fetch('/votings/' + voteId, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
          }
        })
        .then(function (res) {
          return res.json();
        });
      }

      var $votingForm = document.querySelector('.voting-form');

      $votingForm.addEventListener('submit', function (e) {
        e.preventDefault();

        if (!$votingForm.option.value) {
          alert('Please vote before submit!');
        }

        var $checkedRadio = document.querySelector('input[type="radio"]:checked');
        var $checkedLabel = $checkedRadio.parentElement;
        var optionId = $checkedRadio.dataset.optionId;
        var voteId = $checkedLabel.dataset.voteId;

        sendVoteApi(voteId, optionId)
          .then(function (res) {
            if (res.fail || res.success) {
              alert(res.fail || res.success);
              location.reload();
            }
          })
          .catch(function (err) {
            console.error(err);
          });
      });

      var $btnDelVote = document.querySelector('.btn-del-vote');

      if ($btnDelVote) {
        $btnDelVote.addEventListener('click', function () {
          delVoteApi(getVotingId())
            .then(function (res) {
              console.log(res)
              if (res.success) {
                alert(res.success);
              }
              location.href = '/';
            })
            .catch(function (err) {
              console.error(err);
            })
        });
      }

      function getVotingId () {
        var index = location.pathname.lastIndexOf('/');
        return location.pathname.slice(index + 1);
      }
    </script>
  </body>
</html>
